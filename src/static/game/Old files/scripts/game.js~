const PIECE_H = 100;
const PIECE_W = 100;
const BORDER_THICKNESS = 1;
var main_stage;
var stage;
var pieces = [];
var slots = [];
var score = 0;
var currNegPos = 0;
var zoom;

function init() {
    main_stage = new createjs.Stage("canvas");
    stage = new createjs.Container();
    
    buildPiece([1,-2,3]);
    buildPiece([2]);
    buildPiece([-3]);
    buildPiece([-1]);
    //setBlocks();

//    setupCanvas();
    main_stage.addChild(stage);
    startGame();
}


function setupCanvas(){
//Zoom and pan functions for the canvas

canvas.addEventListener("mousewheel", MouseWheelHandler, false);
canvas.addEventListener("DOMMouseScroll", MouseWheelHandler, false);


}


function MouseWheelHandler(e){
if(Math.max(-1, Math.min(1, (e.wheelDelta || -e.detail)))>0)
        zoom=.1;
    else
        zoom= -.1;
stage.scaleX += zoom;
stage.scaleY +=zoom;
main_stage.update();


}


function buildPiece(st_list) {
    var colors = ['blue', 'red', 'green', 'yellow','blue'];
    var piece = new createjs.Container();
    var i;
    piece.keys = st_list;
    piece.currentAngle = 0;
    for (i=0; i < st_list.length;i++){
        var st = new createjs.Shape();

        st.graphics.setStrokeStyle(10);
        if (st_list[i] > 0){
            //st.graphics.beginStroke('white');
            st.graphics.beginFill(colors[st_list[i]]);
        }
        else if(st_list[i] < 0){
            st.graphics.beginStroke(colors[-1*st_list[i]]);
            //st.graphics.beginFill('white');
        }
        hit = new createjs.Shape();
        hit.graphics.beginFill("#000").rect(PIECE_W*i, 0, PIECE_W, PIECE_H);
        st.hitArea = hit;

        st.graphics.drawRect((PIECE_W)*i, 0, PIECE_W-2*BORDER_THICKNESS, PIECE_H-2*BORDER_THICKNESS);
        st.key = st_list[i];
        piece.addChild(st);
    }

    piece.regX = (st_list.length * 100 )/2;
    piece.regY = 50;
    piece.y = Math.random()*600;
    piece.x = Math.random()*800;

    piece.on("mousedown", function(evt){
                            
                            stage.setChildIndex(evt.currentTarget,stage.getNumChildren() - 1);
                            //evt.currentTarget.regX = stage.mouseX;
                            //evt.currentTarget.regY = stage.mouseY;
                                });

    piece.on("pressmove", function(evt){
                            evt.currentTarget.x = evt.stageX;
                            evt.currentTarget.y = evt.stageY;
                            
                            main_stage.update();
                        });
    piece.on("dblclick",function(evt){
                            evt.currentTarget.currentAngle += 90;
                            //evt.currentTarget.rotation += 90;
                            createjs.Tween.get(evt.currentTarget).to({rotation:evt.currentTarget.currentAngle},500);
                            main_stage.update();

    });
    piece.on("pressup", checkCollision);

    stage.addChild(piece)
    pieces.push(piece);
}


function checkCollision(e) {
    currP = e.currentTarget;
    currPx = e.currentTarget.x;
    currPy = e.currentTarget.y;
    currKeys = e.currentTarget.keys
    var i;
    for(i=0;i<currKeys.length;i++){
        currentKey = currKeys[i];
        var j;
        for(j=0;j<pieces.length;j++){
            if(collide(pieces[j],currP)){
                if(currentKeyNegIn(pieces[j],currentKey)){
//                console.log("Curr neg pos = " + currNegPos);
                    var neg_piece = pieces[j].getChildAt(currNegPos);
  //                  console.log("Piece x = " + neg_piece.x);
                    var Localpt = new createjs.Point(PIECE_W*currNegPos,0);
                    var point = pieces[j].localToGlobal(Localpt.x+(PIECE_W/2),Localpt.y+(PIECE_H/2));
    //                console.log(Localpt.x + "," + Localpt.y); 
                  createjs.Tween.get(currP).to({x:point.x, y:point.y},200, createjs.Ease.quadOut).wait(500).to({alpha:0}, 1000);
		  createjs.Tween.get(pieces[j].getChildAt(currNegPos)).wait(500).to({alpha:0}, 1000);
                    break;    
                }
            }
        }    
    }
}


function collide(rect2, rect1){
if (rect1.x < (rect2.x+((rect2.keys.length*PIECE_W)/2)) && rect1.x > (rect2.x-((rect2.keys.length*PIECE_W)/2)) && rect1.y < rect2.y + (PIECE_H/2) && rect1.y > rect2.y - (PIECE_H/2) )
       { 
//console.log("COLLIDING!");
return true;}
else
    {
//console.log("NOT COLLIDING!");
return false;}


}

function currentKeyNegIn(piece,key){
    var i;
    var result = false;
    for (i=0;i<piece.keys.length;i++){
        if( piece.keys[i] == (-1*key) ){
            //Global variable to keep track of current Negation piece
            currNegPos = i;
            result = true;
            break;
        }
    }
    return result;
}


function startGame() {
    createjs.Ticker.setFPS(60);
    createjs.Ticker.addEventListener("tick", function(e){
    main_stage.update();
    });
}


 
