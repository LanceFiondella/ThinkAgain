function solvedPiece(p1,p2,p1_keys,p2_keys,i,j){
	//This function removes atoms at positions i and j in p1_keys and p2_keys respectively and adds the rest of the atoms to the board
	//console.log("Inside solved piece function");
	var new_keys = [];
	var p1_keys_temp = p1_keys.slice();
	var p2_keys_temp = p2_keys.slice();
	delete p1_keys_temp[i];
	delete p2_keys_temp[j];
	
	for(var i =0;i<p1_keys_temp.length;i++){
		for(var j=0;j<p2_keys_temp.length;j++){
				if (p1_keys_temp[i] == p2_keys_temp[j]){
					delete p1_keys_temp[i];
				}
			
		}
	}
	
	
	
	new_keys = p1_keys_temp.concat(p2_keys_temp).filter(Number);
	new_keys.sort();
	console.log("Solving pieces " + new_keys );
	
	
	var add_piece = true;
		for (var i =0; i< pm._piece_list.length; i++){
			if(arraysEqual(new_keys,pm._piece_list[i].keys)){
				console.log("Duplicate piece!!!");
                //Flash the piece
                createjs.Tween.get(pm._piece_list[i]).to({alpha:0}).wait(250).to({alpha:1}).wait(250).to({alpha:0}).wait(250).to({alpha:1}).wait(250).to({alpha:0}).wait(250).to({alpha:1}).wait(250).to({alpha:0}).wait(250).to({alpha:1});
				add_piece = false;
				break;
			}
		
		}
		
	if (add_piece){
			pm._num_steps++;
			pm.addPiece(new_keys);
			pm._piece_list[pm._total_pieces-1].scaleX = 0.2;
			pm._piece_list[pm._total_pieces-1].scaleY = 0.2;
			play_area.addChild(pm._piece_list[pm._total_pieces-1])
			new_piece = pm._piece_list[pm._total_pieces-1];
			
			//Add node and links to graph. 
			//**************************Following code is only for graph
			var parent_node1 = {id: p1.piece_num, label: p1.piece_num.toString()};
			var parent_node2 = {id: p2.piece_num, label: p2.piece_num.toString()};
			var graph_node = {id: new_piece.piece_num, label: new_piece.piece_num.toString()};
			//graph_node.id = new_piece.piece_num;
			//graph_node.label = new_piece.piece_num.toString();
			add_graph_node(parent_node1);
			add_graph_node(parent_node2);
			add_graph_node(graph_node);
			
			var graph_edge1 = {from: p1.piece_num, to: new_piece.piece_num, label: "Step " + pm._num_steps.toString()};
						
			var graph_edge2 = {from: p2.piece_num, to: new_piece.piece_num, label: "Step " + pm._num_steps.toString()};
			
			
			graph_edges.add([graph_edge1,graph_edge2]);
			
			console.log(graph_edges);
			//graph_network = new vis.Network(graph_container, graph_data, graph_options);
			//graph_network.redraw();
			//**************************End of graph code
			
			
			//Animate the new piece
			createjs.Tween.get(new_piece).to({scaleX: 0.2, scaleY: 0.2}).to({scaleX: 1, scaleY: 1}, 1000, createjs.Ease.bounceOut);
			createjs.Sound.play("bubble");
			
			//Check if new piece satisfies conclusion
			if (new_keys.length == 0){
				
				alert("You win!");
				
				
			}
			
		}
}


function solvePiecesOld(p1,p2){
	
	if (pm.negationPresent(p1,p2)){
	
		p1_keys = p1.keys.slice();
		p2_keys = p2.keys.slice();
		
		for(var i = 0; i < p1_keys.length; i++){
			for(var j = 0; j < p2_keys.length; j++){
				if (p1_keys[i] == -1*(p2_keys[j])){
					solvedPiece(p1,p2,p1_keys,p2_keys,i,j);
				}
				 
			}
		}
		
	
	
	}
	
}